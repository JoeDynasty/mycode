{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 21\n",
    "j = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i > j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i >= j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i <= j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i != j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pset_time = 15\n",
    "sleep_time = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sleep_time > pset_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "drink = True\n",
    "drive = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "both = drink and drive\n",
    "print(both)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if drink:\n",
    "    print(\"Drink is True\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pwd = input(\"what is the password\")\n",
    "if pwd == \"apple\": # note the use of two ==\n",
    "    print(\"logging on ... \")\n",
    "    print(\"All done\")\n",
    "else:\n",
    "    print(\"incorrect password\")\n",
    "    print(\"try again\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "age = int(input(\"How old are you?\"))\n",
    "if age <= 2:\n",
    "    print(\"free\")\n",
    "elif 2 < age < 13:\n",
    "    print(\"child fare\")\n",
    "else:\n",
    "    print(\"aduit fare\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "height = int(input(\"how tall are you (in meters)\"))\n",
    "if height >= 150:\n",
    "    print(\"you may enter the ride\")\n",
    "elif 130 <= height <= 150:\n",
    "    print(\"parent needed for ride\")\n",
    "else: \n",
    "    print(\"Not recommand for ride\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10): # \"up to but not including 10\"\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1, 11):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 0 \n",
    "while i < 10:\n",
    "    print(i)\n",
    "    i = i + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    # do something\n",
    "    # in an if statement, check on something\n",
    "    # only when it is true, break out of the loop\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = int(input(\"Enter an integer that is greater than 0: \"))\n",
    "fact = 1\n",
    "for i in range(2, n+1):\n",
    "    fact = fact*i\n",
    "print(str(n) + \" the factorial is\" + str(fact))\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = int(input(\"Enter an integer that is greater than 0: \"))\n",
    "fact = 1\n",
    "i = 2\n",
    "while i <= n:\n",
    "    fact = fact * i \n",
    "    i = i + 1\n",
    "    \n",
    "print(str(n) + \" the factorial is \" + str(fact))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "total = 0 \n",
    "s = input(\"Enter a number or type done: \")\n",
    "while s != \"done\":\n",
    "    num = int(s)\n",
    "    total = total + num\n",
    "    s = input(\"Enter a number again or type done\")\n",
    "print(\"The sum is : \" + str(total))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PART A\n",
    "\n",
    "Annual_salary = float(input(\"Enter your annual salary: \"))\n",
    "Portion_saved = float(input(\"Enter the percent of your salary to save, as decimal: \")) #for example 0.25\n",
    "Total_cost = float(input(\"Enter the cost of your dream home: \"))\n",
    "r = 0.04\n",
    "current_savings = 0\n",
    "month = 0\n",
    "Portion_down_payment = 0.25\n",
    "Monthly_rate = r/12\n",
    "\n",
    "#i = current_savings * r / 12\n",
    "#x = Annual_salary / 12 * Portion_saved\n",
    "#current_savings = i * Total_cost * Portion_down_payment\n",
    "\n",
    "i=0\n",
    "\n",
    "Annual_savings = Annual_salary * Portion_saved\n",
    "Portion_down_payment = Portion_down_payment * Total_cost\n",
    "\n",
    "month = Portion_down_payment / Annual_savings\n",
    "Monthly = Annual_savings / 12\n",
    "\n",
    "\n",
    "#intrest_amount = (Monthly_rate * Monthly)\n",
    "#Monthly_savings = intrest_amount + Monthly\n",
    "\n",
    "while current_savings < Portion_down_payment:\n",
    "    current_savings += (current_savings * Monthly_rate) + Monthly\n",
    "    i = i + 1\n",
    "\n",
    "\n",
    "print(\"Number of months: \" + str(i))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pow(2,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pow(5, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pow(2, 5) +8\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pow(0, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Joe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = print(\"Joe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Daisy\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "def area(radius):\n",
    "    \"\"\"\n",
    "    Returns the area of a circle \n",
    "    with the given radius\n",
    "    For example:\n",
    "    area(5.5)\n",
    "    95.0331\n",
    "    \"\"\"\n",
    "    x = 21\n",
    "    y = \"Daisy\"\n",
    "    print(y)\n",
    "    return math.pi*radius**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.141592653589793"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95.03317777109125"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area(5.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def say_hello_to(name):\n",
    "    \"\"\"\n",
    "    Prints a hello message\n",
    "    \"\"\"\n",
    "    cap_name = name.capitalize()\n",
    "    print(\"Hello \" + cap_name + \", how are you?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Joe, how are you?\n"
     ]
    }
   ],
   "source": [
    "say_hello_to(\"Joe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "def dist(x, y, a, b):\n",
    "    s = (x-a)**2 + (y-b)**2\n",
    "    return math.sqrt(s)\n",
    "\n",
    "def rect_area(x, y, a, b):\n",
    "    width = abs(x-a)\n",
    "    height = abs(y-b)\n",
    "    return width * height\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Joe! \n"
     ]
    }
   ],
   "source": [
    "name = \"Joe\" # global\n",
    "\n",
    "def say_hello():\n",
    "    print(\"Hello \" + name + \"! \")\n",
    "    \n",
    "say_hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def change_name(new_name):\n",
    "    global name\n",
    "    name = new_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Joe! \n"
     ]
    }
   ],
   "source": [
    "say_hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "change_name(\"Matt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Matt! \n"
     ]
    }
   ],
   "source": [
    "say_hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    pwd = input(\"What is the password? \")\n",
    "    if pwd == \"apple\":\n",
    "        print(\"logging on... \")\n",
    "        say_hello()\n",
    "        change_name(\"Joe\")\n",
    "        say_hello()\n",
    "    else:\n",
    "        print(\"incorrect password\")\n",
    "    print(\"All done!\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What is the password?  apple\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logging on... \n",
      "Hello Matt! \n",
      "Hello Joe! \n",
      "All done!\n"
     ]
    }
   ],
   "source": [
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
